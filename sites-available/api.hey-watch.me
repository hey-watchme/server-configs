server {
    server_name api.hey-watch.me;
    client_max_body_size 200M;

    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }


    # Mood Chart Prompt Generator API (vibe-aggregator)
    location /vibe-aggregator/ {
        proxy_pass http://localhost:8009/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # CORS設定
        add_header "Access-Control-Allow-Origin" "*";
        add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS";
        add_header "Access-Control-Allow-Headers" "Content-Type, Authorization";
        
        # OPTIONSリクエストの処理
        if ($request_method = "OPTIONS") {
            return 204;
        }
    }

    # VibeGraph Generation API (vibe-scorer)
    location /vibe-scorer/ {
        proxy_pass http://localhost:8002/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # CORS設定
        add_header "Access-Control-Allow-Origin" "*";
        add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS";
        add_header "Access-Control-Allow-Headers" "Content-Type, Authorization";
        
        # OPTIONSリクエストの処理
        if ($request_method = "OPTIONS") {
            return 204;
        }
    }

    # AST API (behavior-features) - 新APIに移行済み
    # Sound Event Detection Aggregator API (behavior-aggregator)
    location /behavior-aggregator/ {
        proxy_pass http://localhost:8010/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # CORS設定
        add_header "Access-Control-Allow-Origin" "*";
        add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, DELETE";
        add_header "Access-Control-Allow-Headers" "Content-Type, Authorization";
        
        # OPTIONSリクエストの処理
        if ($request_method = "OPTIONS") {
            return 204;
        }
    }

    # SUPERB API (emotion-features) - 新APIに移行済み

    # OpenSMILE Aggregator API (emotion-aggregator)
    location /emotion-aggregator/ {
        proxy_pass http://localhost:8012/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # CORS設定
        add_header "Access-Control-Allow-Origin" "*";
        add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, DELETE";
        add_header "Access-Control-Allow-Headers" "Content-Type, Authorization";
        
        # OPTIONSリクエストの処理
        if ($request_method = "OPTIONS") {
            return 204;
        }
    }
    location /emotion-features/ {
        proxy_pass http://localhost:8018/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # タイムアウト設定を追加（180秒）
        proxy_read_timeout 180s;
        proxy_connect_timeout 180s;
        proxy_send_timeout 180s;
        
        # CORS設定
        add_header "Access-Control-Allow-Origin" "*";
        add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS";
        add_header "Access-Control-Allow-Headers" "Content-Type, Authorization";
        
        # OPTIONSリクエストの処理
        if ($request_method = "OPTIONS") {
            return 204;
        }
    }
    # API Manager
    location /manager/ {
        proxy_pass http://localhost:9001/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # CORS設定
        add_header "Access-Control-Allow-Origin" "*";
        add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS";
        add_header "Access-Control-Allow-Headers" "Content-Type, Authorization";
        
        # OPTIONSリクエストの処理
        if ($request_method = "OPTIONS") {
            return 204;
        }
    }


    # Scheduler API
    location /scheduler/ {
        proxy_pass http://localhost:8015/api/scheduler/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # CORS設定
        add_header "Access-Control-Allow-Origin" "*";
        add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS";
        add_header "Access-Control-Allow-Headers" "Content-Type, Authorization";

        # OPTIONSリクエストの処理
        if ($request_method = 'OPTIONS') {
            return 204;
        }
    }
    location /behavior-features/ {
        proxy_pass http://localhost:8017/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # タイムアウト設定を追加（180秒）
        proxy_read_timeout 180s;
        proxy_connect_timeout 180s;
        proxy_send_timeout 180s;
        
        # CORS設定
        add_header "Access-Control-Allow-Origin" "*";
        add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS";
        add_header "Access-Control-Allow-Headers" "Content-Type, Authorization";
        
        # OPTIONSリクエストの処理
        if ($request_method = "OPTIONS") {
            return 204;
        }
    }

    # Azure Speech Service API (vibe-transcriber-v2)
    location /vibe-transcriber-v2/ {
        proxy_pass http://localhost:8013/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # タイムアウト設定を追加（180秒）
        proxy_read_timeout 180s;
        proxy_connect_timeout 180s;
        proxy_send_timeout 180s;
        
        # CORS設定
        add_header "Access-Control-Allow-Origin" "*";
        add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS";
        add_header "Access-Control-Allow-Headers" "Content-Type, Authorization";
        
        # OPTIONSリクエストの処理
        if ($request_method = "OPTIONS") {
            return 204;
        }
    }

    # Avatar Uploader API
    location /avatar/ {
        proxy_pass http://localhost:8014/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # CORS設定
        add_header "Access-Control-Allow-Origin" "*";
        add_header "Access-Control-Allow-Methods" "GET, POST, DELETE, OPTIONS";
        add_header "Access-Control-Allow-Headers" "Content-Type, Authorization";

        # OPTIONSリクエストの処理
        if ($request_method = "OPTIONS") {
            return 204;
        }

        # ファイルアップロード用の設定
        client_max_body_size 10M;  # 10MBまでの画像アップロードを許可
    }

    # Demo Data Generator API
    location /demo-generator/ {
        proxy_pass http://localhost:8020/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # CORS設定
        add_header "Access-Control-Allow-Origin" "*";
        add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS";
        add_header "Access-Control-Allow-Headers" "Content-Type, Authorization";

        # OPTIONSリクエストの処理
        if ($request_method = "OPTIONS") {
            return 204;
        }
    }

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/api.hey-watch.me/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/api.hey-watch.me/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}

server {
    if ($host = api.hey-watch.me) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    listen 80;
    server_name api.hey-watch.me;
    return 404; # managed by Certbot


}
